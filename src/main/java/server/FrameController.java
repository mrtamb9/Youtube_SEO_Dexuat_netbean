/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import controls.ServerControls;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import utils.Utils;

/**
 *
 * @author thanhtam
 */
public class FrameController extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    ServerControls serverControler = new ServerControls();
    DefaultListModel<String> listModelInformation = new DefaultListModel<>();
    DefaultListModel<String> listModelInformation1 = new DefaultListModel<>();
    DefaultListModel<String> listModelHashtag = new DefaultListModel<>();
    ArrayList<String> listTargetVideos;
    ArrayList<String> listOtherVideos;
    ArrayList<String> listComments;
    ArrayList<String> listAccounts;
    ArrayList<String> listComments1;

    ArrayList<String> listChannels;
    ArrayList<String> listSourceVideosClickSuggest;
    ArrayList<String> listCommentsClickSuggest;

    public FrameController() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPanel = new javax.swing.JTabbedPane();
        panelAccountManager = new javax.swing.JPanel();
        panelAccount = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tf_username = new javax.swing.JTextField();
        tf_ip = new javax.swing.JTextField();
        btnChooseFileAccount = new javax.swing.JButton();
        btnAddOneAccount = new javax.swing.JButton();
        tf_password = new javax.swing.JPasswordField();
        panelHomePage = new javax.swing.JPanel();
        panelAction1 = new javax.swing.JPanel();
        btnLoadAllIP1 = new javax.swing.JButton();
        btnLoadWarningIP1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListInformation1 = new javax.swing.JList<>();
        btn_StartSeoHomepage = new javax.swing.JButton();
        btnStop1 = new javax.swing.JButton();
        btnLoadParameter1 = new javax.swing.JButton();
        btnDeleteIP1 = new javax.swing.JButton();
        btn_LoadHashtag = new javax.swing.JButton();
        btn_DeleteHashtag = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlistHashtag = new javax.swing.JList<>();
        btn_AddHashtag = new javax.swing.JButton();
        tf_hashtag = new javax.swing.JTextField();
        tf_idvideo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tf_minTime1 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        tf_maxTime1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tf_comments1 = new javax.swing.JTextField();
        btnSubmitParameters1 = new javax.swing.JButton();
        panelSuggest = new javax.swing.JPanel();
        panelParameter = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tf_minTime = new javax.swing.JTextField();
        tf_myVideos = new javax.swing.JTextField();
        tf_maxTime = new javax.swing.JTextField();
        tf_otherVideos = new javax.swing.JTextField();
        tf_comments = new javax.swing.JTextField();
        btnSubmitParameters = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        tf_minTimeOther = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        tf_maxTimeOther = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        panelAction = new javax.swing.JPanel();
        btnLoadAllIP = new javax.swing.JButton();
        btnLoadWarningIP = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnLoadParameter = new javax.swing.JButton();
        btnDeleteIP = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListInformation = new javax.swing.JList<>();
        panelClickSuggest = new javax.swing.JPanel();
        panelAction2 = new javax.swing.JPanel();
        btnLoadAllIPClickSuggest = new javax.swing.JButton();
        btnLoadWarningIPClickSuggest = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListInformationClickSuggest = new javax.swing.JList<>();
        btn_StartClickSuggest = new javax.swing.JButton();
        btnStopClickSuggest = new javax.swing.JButton();
        btnLoadParameterClickSuggest = new javax.swing.JButton();
        btnDeleteIPClickSuggest = new javax.swing.JButton();
        panelParameter1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        tf_minTimeClickVideo = new javax.swing.JTextField();
        tf_Channels = new javax.swing.JTextField();
        tf_maxTimeClickVideo = new javax.swing.JTextField();
        tf_sourceVideos = new javax.swing.JTextField();
        tf_commentsClickSuggest = new javax.swing.JTextField();
        btnSubmitParametersClickSuggest = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        tf_minTimeSourceVideo = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        tf_maxTimeSourceVideo = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SEO YOUTUBE");
        setMinimumSize(new java.awt.Dimension(800, 700));
        setPreferredSize(new java.awt.Dimension(846, 600));

        tabPanel.setPreferredSize(new java.awt.Dimension(800, 700));

        panelAccount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("UserName");

        jLabel2.setText("IP Address");

        jLabel3.setText("Password");

        tf_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_usernameActionPerformed(evt);
            }
        });

        tf_ip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_ipActionPerformed(evt);
            }
        });
        tf_ip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_ipKeyTyped(evt);
            }
        });

        btnChooseFileAccount.setText("Choose File Account");
        btnChooseFileAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileAccountActionPerformed(evt);
            }
        });

        btnAddOneAccount.setText("Save Account");
        btnAddOneAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOneAccountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAccountLayout = new javax.swing.GroupLayout(panelAccount);
        panelAccount.setLayout(panelAccountLayout);
        panelAccountLayout.setHorizontalGroup(
            panelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAccountLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tf_ip, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .addComponent(tf_username)
                    .addComponent(tf_password))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAccountLayout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addGroup(panelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddOneAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseFileAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );
        panelAccountLayout.setVerticalGroup(
            panelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAccountLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tf_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAccountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAddOneAccount)
                .addGap(12, 12, 12)
                .addComponent(btnChooseFileAccount)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelAccountManagerLayout = new javax.swing.GroupLayout(panelAccountManager);
        panelAccountManager.setLayout(panelAccountManagerLayout);
        panelAccountManagerLayout.setHorizontalGroup(
            panelAccountManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAccountManagerLayout.createSequentialGroup()
                .addContainerGap(227, Short.MAX_VALUE)
                .addComponent(panelAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(218, 218, 218))
        );
        panelAccountManagerLayout.setVerticalGroup(
            panelAccountManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAccountManagerLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(panelAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(295, Short.MAX_VALUE))
        );

        tabPanel.addTab("Accounts Manager", panelAccountManager);

        panelHomePage.setToolTipText("");

        panelAction1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnLoadAllIP1.setText("Load All IP");
        btnLoadAllIP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadAllIP1ActionPerformed(evt);
            }
        });

        btnLoadWarningIP1.setText("Load Warning IP");
        btnLoadWarningIP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadWarningIP1ActionPerformed(evt);
            }
        });

        jListInformation1.setModel(listModelInformation);
        jListInformation1.setVisibleRowCount(20);
        jScrollPane3.setViewportView(jListInformation1);

        btn_StartSeoHomepage.setText("Start");
        btn_StartSeoHomepage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_StartSeoHomepageActionPerformed(evt);
            }
        });

        btnStop1.setText("Stop");
        btnStop1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStop1ActionPerformed(evt);
            }
        });

        btnLoadParameter1.setText("Load Parameter");
        btnLoadParameter1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadParameter1ActionPerformed(evt);
            }
        });

        btnDeleteIP1.setText("Delete");
        btnDeleteIP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteIP1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAction1Layout = new javax.swing.GroupLayout(panelAction1);
        panelAction1.setLayout(panelAction1Layout);
        panelAction1Layout.setHorizontalGroup(
            panelAction1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAction1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(panelAction1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnStop1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_StartSeoHomepage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadWarningIP1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(btnDeleteIP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadAllIP1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadParameter1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelAction1Layout.setVerticalGroup(
            panelAction1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAction1Layout.createSequentialGroup()
                .addGroup(panelAction1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAction1Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(btnLoadAllIP1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLoadWarningIP1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_StartSeoHomepage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStop1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLoadParameter1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteIP1))
                    .addGroup(panelAction1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        btn_LoadHashtag.setText("Load Hashtags");
        btn_LoadHashtag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_LoadHashtagActionPerformed(evt);
            }
        });

        btn_DeleteHashtag.setText("Delete Hashtag");
        btn_DeleteHashtag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteHashtagActionPerformed(evt);
            }
        });

        jlistHashtag.setModel(listModelHashtag);
        jScrollPane1.setViewportView(jlistHashtag);

        btn_AddHashtag.setText("Add");
        btn_AddHashtag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddHashtagActionPerformed(evt);
            }
        });

        jLabel10.setText("ID Video");

        jLabel9.setText("HashTag");

        jLabel11.setText("Min Time (s)");

        tf_minTime1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_minTime1ActionPerformed(evt);
            }
        });
        tf_minTime1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_minTime1KeyTyped(evt);
            }
        });

        jLabel12.setText("Max Time (s)");

        tf_maxTime1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_maxTime1ActionPerformed(evt);
            }
        });
        tf_maxTime1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_maxTime1KeyTyped(evt);
            }
        });

        jLabel13.setText("Comments");

        tf_comments1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tf_comments1MouseClicked(evt);
            }
        });
        tf_comments1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_comments1ActionPerformed(evt);
            }
        });

        btnSubmitParameters1.setText("Save Parameters");
        btnSubmitParameters1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitParameters1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelHomePageLayout = new javax.swing.GroupLayout(panelHomePage);
        panelHomePage.setLayout(panelHomePageLayout);
        panelHomePageLayout.setHorizontalGroup(
            panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomePageLayout.createSequentialGroup()
                .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelHomePageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelAction1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelHomePageLayout.createSequentialGroup()
                        .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHomePageLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btn_AddHashtag, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42))
                            .addGroup(panelHomePageLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))
                                .addGap(27, 27, 27)
                                .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_hashtag, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tf_idvideo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(17, 17, 17)))
                        .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelHomePageLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_DeleteHashtag, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                    .addComponent(btn_LoadHashtag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(54, 54, 54)
                        .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel13))
                        .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelHomePageLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_maxTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tf_minTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tf_comments1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelHomePageLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(btnSubmitParameters1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelHomePageLayout.setVerticalGroup(
            panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomePageLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelHomePageLayout.createSequentialGroup()
                        .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(tf_idvideo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tf_hashtag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_AddHashtag)
                        .addGap(112, 112, 112))
                    .addGroup(panelHomePageLayout.createSequentialGroup()
                        .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelHomePageLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_LoadHashtag))
                            .addGroup(panelHomePageLayout.createSequentialGroup()
                                .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(tf_minTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tf_maxTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tf_comments1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13))
                                .addGap(18, 18, 18)
                                .addComponent(btnSubmitParameters1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_DeleteHashtag)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(panelAction1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabPanel.addTab("SEO Keyword", panelHomePage);

        panelParameter.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setText("Watch time (s)");

        jLabel6.setText("My Videos");

        jLabel7.setText("Other Videos");

        jLabel8.setText("Comments");

        tf_minTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_minTimeActionPerformed(evt);
            }
        });
        tf_minTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_minTimeKeyTyped(evt);
            }
        });

        tf_myVideos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tf_myVideosMouseClicked(evt);
            }
        });
        tf_myVideos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_myVideosActionPerformed(evt);
            }
        });

        tf_maxTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_maxTimeActionPerformed(evt);
            }
        });
        tf_maxTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_maxTimeKeyTyped(evt);
            }
        });

        tf_otherVideos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tf_otherVideosMouseClicked(evt);
            }
        });
        tf_otherVideos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_otherVideosActionPerformed(evt);
            }
        });

        tf_comments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tf_commentsMouseClicked(evt);
            }
        });
        tf_comments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_commentsActionPerformed(evt);
            }
        });

        btnSubmitParameters.setText("Save Parameters");
        btnSubmitParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitParametersActionPerformed(evt);
            }
        });

        jLabel14.setText("from");

        jLabel15.setText("to");

        jLabel18.setText("(s)");

        jLabel19.setText("(s)");

        jLabel20.setText("Watch time (s)");

        jLabel21.setText("from");

        tf_minTimeOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_minTimeOtherActionPerformed(evt);
            }
        });
        tf_minTimeOther.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_minTimeOtherKeyTyped(evt);
            }
        });

        jLabel22.setText("(s)");

        jLabel23.setText("to");

        tf_maxTimeOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_maxTimeOtherActionPerformed(evt);
            }
        });
        tf_maxTimeOther.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_maxTimeOtherKeyTyped(evt);
            }
        });

        jLabel24.setText("(s)");

        javax.swing.GroupLayout panelParameterLayout = new javax.swing.GroupLayout(panelParameter);
        panelParameter.setLayout(panelParameterLayout);
        panelParameterLayout.setHorizontalGroup(
            panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParameterLayout.createSequentialGroup()
                .addGroup(panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelParameterLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_comments, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tf_myVideos, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tf_otherVideos, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelParameterLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelParameterLayout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(6, 6, 6)
                                        .addComponent(tf_minTime, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)
                                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(tf_maxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel19))
                                    .addGroup(panelParameterLayout.createSequentialGroup()
                                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(tf_minTimeOther, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel22)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel23)
                                        .addGap(4, 4, 4)
                                        .addComponent(tf_maxTimeOther, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel24))))))
                    .addGroup(panelParameterLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(btnSubmitParameters, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelParameterLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        panelParameterLayout.setVerticalGroup(
            panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParameterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tf_myVideos, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tf_minTime, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_maxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tf_otherVideos, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(tf_minTimeOther, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_maxTimeOther, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel23)
                    .addComponent(jLabel22)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParameterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tf_comments, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSubmitParameters)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        panelAction.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnLoadAllIP.setText("Load All IP");
        btnLoadAllIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadAllIPActionPerformed(evt);
            }
        });

        btnLoadWarningIP.setText("Load Warning IP");
        btnLoadWarningIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadWarningIPActionPerformed(evt);
            }
        });

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnLoadParameter.setText("Load Parameter");
        btnLoadParameter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadParameterActionPerformed(evt);
            }
        });

        btnDeleteIP.setText("Delete");
        btnDeleteIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteIPActionPerformed(evt);
            }
        });

        jListInformation.setModel(listModelInformation);
        jListInformation.setVisibleRowCount(20);
        jScrollPane2.setViewportView(jListInformation);

        javax.swing.GroupLayout panelActionLayout = new javax.swing.GroupLayout(panelAction);
        panelAction.setLayout(panelActionLayout);
        panelActionLayout.setHorizontalGroup(
            panelActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLoadAllIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadWarningIP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadParameter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDeleteIP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelActionLayout.setVerticalGroup(
            panelActionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(panelActionLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(btnLoadAllIP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLoadWarningIP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnStop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLoadParameter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteIP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelSuggestLayout = new javax.swing.GroupLayout(panelSuggest);
        panelSuggest.setLayout(panelSuggestLayout);
        panelSuggestLayout.setHorizontalGroup(
            panelSuggestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuggestLayout.createSequentialGroup()
                .addGroup(panelSuggestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSuggestLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSuggestLayout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(panelParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        panelSuggestLayout.setVerticalGroup(
            panelSuggestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuggestLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelParameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelAction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanel.addTab("SEO Suggest", panelSuggest);

        panelAction2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnLoadAllIPClickSuggest.setText("Load All IP");
        btnLoadAllIPClickSuggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadAllIPClickSuggestActionPerformed(evt);
            }
        });

        btnLoadWarningIPClickSuggest.setText("Load Warning IP");
        btnLoadWarningIPClickSuggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadWarningIPClickSuggestActionPerformed(evt);
            }
        });

        jListInformationClickSuggest.setModel(listModelInformation);
        jListInformationClickSuggest.setVisibleRowCount(20);
        jScrollPane4.setViewportView(jListInformationClickSuggest);

        btn_StartClickSuggest.setText("Start");
        btn_StartClickSuggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_StartClickSuggestActionPerformed(evt);
            }
        });

        btnStopClickSuggest.setText("Stop");
        btnStopClickSuggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopClickSuggestActionPerformed(evt);
            }
        });

        btnLoadParameterClickSuggest.setText("Load Parameter");
        btnLoadParameterClickSuggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadParameterClickSuggestActionPerformed(evt);
            }
        });

        btnDeleteIPClickSuggest.setText("Delete");
        btnDeleteIPClickSuggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteIPClickSuggestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAction2Layout = new javax.swing.GroupLayout(panelAction2);
        panelAction2.setLayout(panelAction2Layout);
        panelAction2Layout.setHorizontalGroup(
            panelAction2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAction2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(panelAction2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnStopClickSuggest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_StartClickSuggest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadWarningIPClickSuggest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(btnDeleteIPClickSuggest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadAllIPClickSuggest, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadParameterClickSuggest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelAction2Layout.setVerticalGroup(
            panelAction2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAction2Layout.createSequentialGroup()
                .addGroup(panelAction2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAction2Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(btnLoadAllIPClickSuggest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLoadWarningIPClickSuggest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_StartClickSuggest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStopClickSuggest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLoadParameterClickSuggest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteIPClickSuggest))
                    .addGroup(panelAction2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        panelParameter1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setText("Watch time (s)");

        jLabel16.setText("My Channels");

        jLabel17.setText("Source Videos");

        jLabel25.setText("Comments");

        tf_minTimeClickVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_minTimeClickVideoActionPerformed(evt);
            }
        });
        tf_minTimeClickVideo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_minTimeClickVideoKeyTyped(evt);
            }
        });

        tf_Channels.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tf_ChannelsMouseClicked(evt);
            }
        });
        tf_Channels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_ChannelsActionPerformed(evt);
            }
        });

        tf_maxTimeClickVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_maxTimeClickVideoActionPerformed(evt);
            }
        });
        tf_maxTimeClickVideo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_maxTimeClickVideoKeyTyped(evt);
            }
        });

        tf_sourceVideos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tf_sourceVideosMouseClicked(evt);
            }
        });
        tf_sourceVideos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_sourceVideosActionPerformed(evt);
            }
        });

        tf_commentsClickSuggest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tf_commentsClickSuggestMouseClicked(evt);
            }
        });
        tf_commentsClickSuggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_commentsClickSuggestActionPerformed(evt);
            }
        });

        btnSubmitParametersClickSuggest.setText("Save Parameters");
        btnSubmitParametersClickSuggest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitParametersClickSuggestActionPerformed(evt);
            }
        });

        jLabel26.setText("from");

        jLabel27.setText("to");

        jLabel28.setText("(s)");

        jLabel29.setText("(s)");

        jLabel30.setText("Watch time (s)");

        jLabel31.setText("from");

        tf_minTimeSourceVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_minTimeSourceVideoActionPerformed(evt);
            }
        });
        tf_minTimeSourceVideo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_minTimeSourceVideoKeyTyped(evt);
            }
        });

        jLabel32.setText("(s)");

        jLabel33.setText("to");

        tf_maxTimeSourceVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_maxTimeSourceVideoActionPerformed(evt);
            }
        });
        tf_maxTimeSourceVideo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_maxTimeSourceVideoKeyTyped(evt);
            }
        });

        jLabel34.setText("(s)");

        javax.swing.GroupLayout panelParameter1Layout = new javax.swing.GroupLayout(panelParameter1);
        panelParameter1.setLayout(panelParameter1Layout);
        panelParameter1Layout.setHorizontalGroup(
            panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParameter1Layout.createSequentialGroup()
                .addGroup(panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelParameter1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_commentsClickSuggest, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tf_Channels, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tf_sourceVideos, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelParameter1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelParameter1Layout.createSequentialGroup()
                                        .addComponent(jLabel26)
                                        .addGap(6, 6, 6)
                                        .addComponent(tf_minTimeClickVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)
                                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(tf_maxTimeClickVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel29))
                                    .addGroup(panelParameter1Layout.createSequentialGroup()
                                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(tf_minTimeSourceVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel32)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel33)
                                        .addGap(4, 4, 4)
                                        .addComponent(tf_maxTimeSourceVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel34))))))
                    .addGroup(panelParameter1Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(btnSubmitParametersClickSuggest, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelParameter1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        panelParameter1Layout.setVerticalGroup(
            panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParameter1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(tf_Channels, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tf_minTimeClickVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_maxTimeClickVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(tf_sourceVideos, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(tf_minTimeSourceVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_maxTimeSourceVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(jLabel33)
                    .addComponent(jLabel32)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParameter1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(tf_commentsClickSuggest, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSubmitParametersClickSuggest)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelClickSuggestLayout = new javax.swing.GroupLayout(panelClickSuggest);
        panelClickSuggest.setLayout(panelClickSuggestLayout);
        panelClickSuggestLayout.setHorizontalGroup(
            panelClickSuggestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClickSuggestLayout.createSequentialGroup()
                .addGroup(panelClickSuggestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelClickSuggestLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelAction2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelClickSuggestLayout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(panelParameter1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        panelClickSuggestLayout.setVerticalGroup(
            panelClickSuggestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelClickSuggestLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelParameter1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addComponent(panelAction2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabPanel.addTab("Click Suggest Videos", panelClickSuggest);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 638, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tf_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_usernameActionPerformed

    private void tf_ipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_ipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_ipActionPerformed

    private void tf_minTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_minTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_minTimeActionPerformed

    private void tf_maxTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_maxTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_maxTimeActionPerformed

    private void tf_commentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_commentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_commentsActionPerformed

    private void tf_otherVideosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_otherVideosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_otherVideosActionPerformed

    private void tf_myVideosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_myVideosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_myVideosActionPerformed

    private void btnAddOneAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOneAccountActionPerformed
        // TODO add your handling code here:
        String ip = tf_ip.getText().trim();
        String username = tf_username.getText().trim();
        String password = tf_password.getText();

        if (ip.length() > 0 && username.length() > 0 && password.length() > 0) {
            try {
                boolean done = serverControler.insertAccount(ip, username, password);
                if (done) {
                    listModelInformation.addElement(listModelInformation.getSize() + ".     " + ip + "     " + username);
                    JOptionPane.showMessageDialog(null, "Success!");
                    tf_ip.setText("");
                    tf_username.setText("");
                    tf_password.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "Fail!");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Fail!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Fail!");
        }
    }//GEN-LAST:event_btnAddOneAccountActionPerformed

    private void btnChooseFileAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileAccountActionPerformed
        // TODO add your handling code here:

        listAccounts = new ArrayList<>();
        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            String filepath = c.getCurrentDirectory().toString() + "/" + c.getSelectedFile().getName();
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filepath)));
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.trim().length() > 0) {
                        String[] arrayLines = line.split("\\|");
                        if (arrayLines.length == 3) {
                            System.out.println(line);
                            String ip = arrayLines[0].trim();
                            String username = arrayLines[1].trim();
                            String password = arrayLines[2].trim();
                            listAccounts.add("('" + ip + "','" + username + "','" + password + "','0','no log')");
                            listModelInformation.addElement(listModelInformation.getSize() + ".     " + ip + "     " + username);
                        }
                    }
                }
                br.close();
            } catch (IOException e1) {
                System.out.println("Error load account!");
                JOptionPane.showMessageDialog(null, "Fail!");
            }

            try {
                boolean done = serverControler.insertMultiAccount(listAccounts);
                if (done) {
                    JOptionPane.showMessageDialog(null, "Success! " + listAccounts.size() + " accounts!");
                } else {
                    JOptionPane.showMessageDialog(null, "Fail!");
                }

            } catch (Exception e2) {
                System.out.println("Error load account 2!");
                e2.printStackTrace();
                JOptionPane.showMessageDialog(null, "Fail!");
            }
        }

    }//GEN-LAST:event_btnChooseFileAccountActionPerformed

    private void btnLoadAllIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadAllIPActionPerformed

        try {
            boolean done = serverControler.getAllAccountFromMySQL();
            if (done) {
                int listIpSize = serverControler.listIps.size();
                int index = jListInformation.getLastVisibleIndex();
                if (index > listIpSize - 1) {
                    index = listIpSize - 1;
                }
                int selectedIndex = jListInformation.getSelectedIndex();

                String arrayStrings[] = new String[serverControler.listInfos.size() + 1];
                arrayStrings[0] = "0.     0.0.0.0     SUPER IP ADDRESS";
                for (int i = 0; i < listIpSize; i++) {
                    String tempString = serverControler.listInfos.get(i);
                    arrayStrings[i + 1] = (i + 1) + ".     " + tempString;
                }
                jListInformation.setListData(new String[0]);
                Thread.sleep(1);
                jListInformation.setListData(arrayStrings);

                jListInformation.ensureIndexIsVisible(index);
                if (selectedIndex >= 0) {
                    jListInformation.setSelectedIndex(selectedIndex);
                }

                JOptionPane.showMessageDialog(null, "Success!");
            } else {
                JOptionPane.showMessageDialog(null, "Fail!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnLoadAllIPActionPerformed

    private void btnSubmitParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitParametersActionPerformed

        if (listTargetVideos == null || listOtherVideos == null || listComments == null) {
            JOptionPane.showMessageDialog(null, "Fail!");
        } else {
            String min_time_second_my_video = tf_minTime.getText();
            String max_time_second_my_video = tf_maxTime.getText();
            String min_time_second_other_video = tf_minTimeOther.getText();
            String max_time_second_other_video = tf_maxTimeOther.getText();
            String target_videos = "";
            for (int i = 0; i < listTargetVideos.size(); i++) {
                target_videos += listTargetVideos.get(i) + ", ";
            }
            if (target_videos.length() >= 2) {
                target_videos = target_videos.substring(0, target_videos.length() - 2);
            }

            String other_videos = "";
            for (int i = 0; i < listOtherVideos.size(); i++) {
                other_videos += listOtherVideos.get(i) + ", ";
            }
            if (other_videos.length() >= 2) {
                other_videos = other_videos.substring(0, other_videos.length() - 2);
            }

            String comments = "";
            for (int i = 0; i < listComments.size(); i++) {
                comments += Utils.normalizeText(listComments.get(i)) + ", ";
            }
            if (comments.length() >= 2) {
                comments = comments.substring(0, comments.length() - 2);
            }

            if (min_time_second_my_video.length() > 0 && max_time_second_my_video.length() > 0
                    && min_time_second_other_video.length() > 0 && max_time_second_other_video.length() > 0
                    && target_videos.length() > 0 && other_videos.length() > 0 && comments.length() > 0) {
                try {
                    boolean done = serverControler.updateParameters(min_time_second_my_video, max_time_second_my_video,
                            min_time_second_other_video, max_time_second_other_video,
                            target_videos, other_videos, comments);
                    if (done) {
                        JOptionPane.showMessageDialog(null, "Success!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Fail!");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Fail!");
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Fail!");
            }
        }
    }//GEN-LAST:event_btnSubmitParametersActionPerformed

    private void btnLoadWarningIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadWarningIPActionPerformed

        try {
            boolean done = serverControler.getAllAccountFromMySQL();
            if (done) {
                int listIpSize = serverControler.listWarning.size();
                int index = jListInformation.getLastVisibleIndex();
                if (index > listIpSize - 1) {
                    index = listIpSize - 1;
                }
                int selectedIndex = jListInformation.getSelectedIndex();

                String arrayStrings[] = new String[serverControler.listWarning.size() + 1];
                arrayStrings[0] = "0.     0.0.0.0     SUPER IP ADDRESS";
                for (int i = 0; i < listIpSize; i++) {
                    String tempString = serverControler.listWarning.get(i);
                    arrayStrings[i + 1] = (i + 1) + ".     " + tempString;
                }
                jListInformation.setListData(new String[0]);
                Thread.sleep(1);
                jListInformation.setListData(arrayStrings);

                jListInformation.ensureIndexIsVisible(index);
                if (selectedIndex >= 0) {
                    jListInformation.setSelectedIndex(selectedIndex);
                }
                JOptionPane.showMessageDialog(null, "Success!");
            } else {
                JOptionPane.showMessageDialog(null, "Fail!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnLoadWarningIPActionPerformed

    private void btnDeleteIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteIPActionPerformed

        try {
            String selection = jListInformation.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String ip = selection.split("     ")[1].trim();
                    String groupIPs = "";
                    if (ip.compareTo("0.0.0.0") == 0) {
                        ListModel<String> model = jListInformation.getModel();
                        for (int i = 1; i < model.getSize(); i++) {
                            String line = model.getElementAt(i).toString();
                            if (line.split("     ").length >= 2) {
                                String tempIP = line.split("     ")[1].trim();
                                groupIPs += "'" + tempIP + "',";
                            }
                        }
                        if (groupIPs.length() >= 1) {
                            groupIPs = groupIPs.substring(0, groupIPs.length() - 1);
                        }
                        groupIPs = "(" + groupIPs + ")";
                    } else {
                        groupIPs += "('" + ip + "')";
                    }
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure delete? " + ip,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.deleteAccountInMySQL(groupIPs);
                        if (done) {
                            if (ip.compareTo("0.0.0.0") == 0) {
                                listModelInformation.removeAllElements();
                                jListInformation.setListData(new String[0]);
                            } else {
                                listModelInformation.removeElement(selection);
                            }

                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnDeleteIPActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed

        try {
            String selection = jListInformation.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String ip = selection.split("     ")[1];
                    String groupIPs = "";
                    if (ip.compareTo("0.0.0.0") == 0) {
                        ListModel<String> model = jListInformation.getModel();
                        for (int i = 1; i < model.getSize(); i++) {
                            String line = model.getElementAt(i).toString();
                            if (line.split("     ").length >= 2) {
                                String tempIP = line.split("     ")[1].trim();
                                groupIPs += "'" + tempIP + "',";
                            }
                        }
                        if (groupIPs.length() >= 1) {
                            groupIPs = groupIPs.substring(0, groupIPs.length() - 1);
                        }
                        groupIPs = "(" + groupIPs + ")";
                    } else {
                        groupIPs += "('" + ip + "')";
                    }
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure start this? " + ip,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.setStatus(groupIPs, 1);
                        if (done) {
                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnStartActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed

        try {
            String selection = jListInformation.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String ip = selection.split("     ")[1];
                    String groupIPs = "";
                    if (ip.compareTo("0.0.0.0") == 0) {
                        ListModel<String> model = jListInformation.getModel();
                        for (int i = 1; i < model.getSize(); i++) {
                            String line = model.getElementAt(i).toString();
                            if (line.split("     ").length >= 2) {
                                String tempIP = line.split("     ")[1].trim();
                                groupIPs += "'" + tempIP + "',";
                            }
                        }
                        if (groupIPs.length() >= 1) {
                            groupIPs = groupIPs.substring(0, groupIPs.length() - 1);
                        }
                        groupIPs = "(" + groupIPs + ")";
                    } else {
                        groupIPs += "('" + ip + "')";
                    }
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure stop this? " + ip,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.setStatus(groupIPs, 0);
                        if (done) {
                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }

                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnStopActionPerformed

    private void btnLoadParameterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadParameterActionPerformed

        try {
            String[] arrayParameters = serverControler.getParameterFromMySQL();

            int selectedIndex = jListInformation.getSelectedIndex();
            jListInformation.setListData(new String[0]);
            Thread.sleep(1);
            jListInformation.setListData(arrayParameters);

            if (selectedIndex >= 0) {
                jListInformation.setSelectedIndex(selectedIndex);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnLoadParameterActionPerformed

    private void tf_myVideosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_myVideosMouseClicked

        listTargetVideos = new ArrayList<>();
        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            String filepath = c.getCurrentDirectory().toString() + "/" + c.getSelectedFile().getName();
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filepath)));
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.trim().length() > 0) {
                        listTargetVideos.add(line);
                    }
                }
                br.close();
            } catch (Exception ex) {
                tf_myVideos.setText("Error");
            }
            tf_myVideos.setText(filepath);
        }
    }//GEN-LAST:event_tf_myVideosMouseClicked

    private void tf_otherVideosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_otherVideosMouseClicked

        listOtherVideos = new ArrayList<>();
        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            String filepath = c.getCurrentDirectory().toString() + "/" + c.getSelectedFile().getName();
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filepath)));
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.trim().length() > 0) {
                        listOtherVideos.add(line);
                    }
                }
                br.close();
            } catch (Exception ex) {
                tf_otherVideos.setText("Error");
            }
            tf_otherVideos.setText(filepath);
        }

    }//GEN-LAST:event_tf_otherVideosMouseClicked

    private void tf_commentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_commentsMouseClicked

        listComments = new ArrayList<>();
        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            String filepath = c.getCurrentDirectory().toString() + "/" + c.getSelectedFile().getName();
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filepath)));
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.trim().length() > 0) {
                        listComments.add(line);
                    }
                }
                br.close();
            } catch (Exception ex) {
                tf_comments.setText("Error");
            }
            tf_comments.setText(filepath);
        }

    }//GEN-LAST:event_tf_commentsMouseClicked

    private void tf_ipKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_ipKeyTyped

        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE) && (c != '.')) {
            evt.consume(); // ignore event
        }

    }//GEN-LAST:event_tf_ipKeyTyped

    private void tf_minTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_minTimeKeyTyped

        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume(); // ignore event
        }

    }//GEN-LAST:event_tf_minTimeKeyTyped

    private void tf_maxTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_maxTimeKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume(); // ignore event
        }
    }//GEN-LAST:event_tf_maxTimeKeyTyped

    private void btn_AddHashtagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddHashtagActionPerformed
        // TODO add your handling code here:
        String hashtag = tf_hashtag.getText().trim();
        String idVideos = tf_idvideo.getText().trim();

        if (hashtag.length() > 0 && idVideos.length() > 0) {
            try {
                listModelHashtag.addElement(idVideos + "     " + hashtag);
                boolean done = serverControler.insertHashtag(idVideos, hashtag);
                if (done) {
                    JOptionPane.showMessageDialog(null, "Success!");
                } else {
                    JOptionPane.showMessageDialog(null, "Fail!");
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Fail!");
            }

            tf_hashtag.setText("");
            tf_idvideo.setText("");
        } else {
            JOptionPane.showMessageDialog(null, "Fail!");
        }
    }//GEN-LAST:event_btn_AddHashtagActionPerformed

    private void btn_DeleteHashtagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteHashtagActionPerformed
        try {
            String selection = jlistHashtag.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String video_id = selection.split("     ")[0].trim();
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure delete? " + video_id,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.deleteHashTagInMySQL(video_id);
                        listModelHashtag.removeElement(selection);
                        if (done) {
                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_DeleteHashtagActionPerformed

    private void btn_LoadHashtagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_LoadHashtagActionPerformed
        try {
            ArrayList<String> listHashtags = serverControler.getAllHashtagFromMySQL();
            String arrayStrings[] = new String[listHashtags.size()];
            for (int i = 0; i < listHashtags.size(); i++) {
                String tempString = listHashtags.get(i);
                arrayStrings[i] = tempString;
            }
            Thread.sleep(1);
            jlistHashtag.setListData(arrayStrings);
            JOptionPane.showMessageDialog(null, "Success!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_LoadHashtagActionPerformed

    private void btnDeleteIP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteIP1ActionPerformed
        try {
            String selection = jListInformation1.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String ip = selection.split("     ")[1].trim();
                    String groupIPs = "";
                    if (ip.compareTo("0.0.0.0") == 0) {
                        ListModel<String> model = jListInformation1.getModel();
                        for (int i = 1; i < model.getSize(); i++) {
                            String line = model.getElementAt(i).toString();
                            if (line.split("     ").length >= 2) {
                                String tempIP = line.split("     ")[1].trim();
                                groupIPs += "'" + tempIP + "',";
                            }
                        }
                        if (groupIPs.length() >= 1) {
                            groupIPs = groupIPs.substring(0, groupIPs.length() - 1);
                        }
                        groupIPs = "(" + groupIPs + ")";
                    } else {
                        groupIPs += "('" + ip + "')";
                    }
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure delete? " + ip,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.deleteAccountInMySQL(groupIPs);
                        if (ip.compareTo("0.0.0.0") == 0) {
                            listModelInformation1.removeAllElements();
                            jListInformation1.setListData(new String[0]);
                        } else {
                            listModelInformation1.removeElement(selection);
                        }

                        if (done) {
                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteIP1ActionPerformed

    private void btnLoadParameter1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadParameter1ActionPerformed
        try {
            String[] arrayParameters = serverControler.getParameterHomepageFromMySQL();

            int selectedIndex = jListInformation1.getSelectedIndex();
            jListInformation1.setListData(new String[0]);
            Thread.sleep(1);
            jListInformation1.setListData(arrayParameters);

            if (selectedIndex >= 0) {
                jListInformation1.setSelectedIndex(selectedIndex);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadParameter1ActionPerformed

    private void btnStop1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStop1ActionPerformed
        try {
            String selection = jListInformation1.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String ip = selection.split("     ")[1];
                    String groupIPs = "";
                    if (ip.compareTo("0.0.0.0") == 0) {
                        ListModel<String> model = jListInformation1.getModel();
                        for (int i = 1; i < model.getSize(); i++) {
                            String line = model.getElementAt(i).toString();
                            if (line.split("     ").length >= 2) {
                                String tempIP = line.split("     ")[1].trim();
                                groupIPs += "'" + tempIP + "',";
                            }
                        }
                        if (groupIPs.length() >= 1) {
                            groupIPs = groupIPs.substring(0, groupIPs.length() - 1);
                        }
                        groupIPs = "(" + groupIPs + ")";
                    } else {
                        groupIPs += "('" + ip + "')";
                    }
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure stop this? " + ip,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.setStatus(groupIPs, 0);
                        if (done) {
                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnStop1ActionPerformed

    private void btn_StartSeoHomepageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_StartSeoHomepageActionPerformed
        try {
            String selection = jListInformation1.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String ip = selection.split("     ")[1];
                    String groupIPs = "";
                    if (ip.compareTo("0.0.0.0") == 0) {
                        ListModel<String> model = jListInformation1.getModel();
                        for (int i = 1; i < model.getSize(); i++) {
                            String line = model.getElementAt(i).toString();
                            if (line.split("     ").length >= 2) {
                                String tempIP = line.split("     ")[1].trim();
                                groupIPs += "'" + tempIP + "',";
                            }
                        }
                        if (groupIPs.length() >= 1) {
                            groupIPs = groupIPs.substring(0, groupIPs.length() - 1);
                        }
                        groupIPs = "(" + groupIPs + ")";
                    } else {
                        groupIPs += "('" + ip + "')";
                    }
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure start this? " + ip,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.setStatus(groupIPs, 2);
                        if (done) {
                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_StartSeoHomepageActionPerformed

    private void btnLoadWarningIP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadWarningIP1ActionPerformed
        try {
            boolean done = serverControler.getAllAccountFromMySQL();
            if (done) {
                int listIpSize = serverControler.listWarning.size();
                int index = jListInformation1.getLastVisibleIndex();
                if (index > listIpSize - 1) {
                    index = listIpSize - 1;
                }
                int selectedIndex = jListInformation1.getSelectedIndex();

                String arrayStrings[] = new String[serverControler.listWarning.size() + 1];
                arrayStrings[0] = "0.     0.0.0.0     SUPER IP ADDRESS";
                for (int i = 0; i < listIpSize; i++) {
                    String tempString = serverControler.listWarning.get(i);
                    arrayStrings[i + 1] = (i + 1) + ".     " + tempString;
                }
                jListInformation1.setListData(new String[0]);
                Thread.sleep(1);
                jListInformation1.setListData(arrayStrings);

                jListInformation1.ensureIndexIsVisible(index);
                if (selectedIndex >= 0) {
                    jListInformation1.setSelectedIndex(selectedIndex);
                }
                JOptionPane.showMessageDialog(null, "Success!");
            } else {
                JOptionPane.showMessageDialog(null, "Fail!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadWarningIP1ActionPerformed

    private void btnLoadAllIP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadAllIP1ActionPerformed
        try {
            boolean done = serverControler.getAllAccountFromMySQL();
            if (done) {
                int listIpSize = serverControler.listIps.size();
                int index = jListInformation1.getLastVisibleIndex();
                if (index > listIpSize - 1) {
                    index = listIpSize - 1;
                }
                int selectedIndex = jListInformation1.getSelectedIndex();

                String arrayStrings[] = new String[serverControler.listInfos.size() + 1];
                arrayStrings[0] = "0.     0.0.0.0     SUPER IP ADDRESS";
                for (int i = 0; i < listIpSize; i++) {
                    String tempString = serverControler.listInfos.get(i);
                    arrayStrings[i + 1] = (i + 1) + ".     " + tempString;
                }
                jListInformation1.setListData(new String[0]);
                Thread.sleep(1);
                jListInformation1.setListData(arrayStrings);

                jListInformation1.ensureIndexIsVisible(index);
                if (selectedIndex >= 0) {
                    jListInformation1.setSelectedIndex(selectedIndex);
                }
                JOptionPane.showMessageDialog(null, "Success!");
            } else {
                JOptionPane.showMessageDialog(null, "Fail!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadAllIP1ActionPerformed

    private void tf_minTime1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_minTime1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_minTime1ActionPerformed

    private void tf_minTime1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_minTime1KeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume(); // ignore event
        }
    }//GEN-LAST:event_tf_minTime1KeyTyped

    private void tf_maxTime1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_maxTime1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_maxTime1ActionPerformed

    private void tf_maxTime1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_maxTime1KeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume(); // ignore event
        }
    }//GEN-LAST:event_tf_maxTime1KeyTyped

    private void tf_comments1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_comments1MouseClicked
        listComments1 = new ArrayList<>();
        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            String filepath = c.getCurrentDirectory().toString() + "/" + c.getSelectedFile().getName();
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filepath)));
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.trim().length() > 0) {
                        listComments1.add(line);
                    }
                }
                br.close();
            } catch (Exception ex) {
                tf_comments1.setText("Error");
            }
            tf_comments1.setText(filepath);
        }
    }//GEN-LAST:event_tf_comments1MouseClicked

    private void tf_comments1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_comments1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_comments1ActionPerformed

    private void btnSubmitParameters1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitParameters1ActionPerformed
        if (listComments1 == null) {
            JOptionPane.showMessageDialog(null, "Fail!");
        } else {
            String min_time_second = tf_minTime1.getText();
            String max_time_second = tf_maxTime1.getText();

            String comments = "";
            for (int i = 0; i < listComments1.size(); i++) {
                comments += Utils.normalizeText(listComments1.get(i)) + ", ";
            }
            if (comments.length() >= 2) {
                comments = comments.substring(0, comments.length() - 2);
            }

            if (min_time_second.length() > 0 && max_time_second.length() > 0 && comments.length() > 0) {
                try {
                    boolean done = serverControler.updateParametersHomepage(min_time_second, max_time_second, comments);
                    if (done) {
                        JOptionPane.showMessageDialog(null, "Success!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Fail!");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Fail!");
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Fail!");
            }
        }
    }//GEN-LAST:event_btnSubmitParameters1ActionPerformed

    private void tf_minTimeOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_minTimeOtherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_minTimeOtherActionPerformed

    private void tf_minTimeOtherKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_minTimeOtherKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_minTimeOtherKeyTyped

    private void tf_maxTimeOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_maxTimeOtherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_maxTimeOtherActionPerformed

    private void tf_maxTimeOtherKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_maxTimeOtherKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_maxTimeOtherKeyTyped

    private void btnLoadAllIPClickSuggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadAllIPClickSuggestActionPerformed
        try {
            boolean done = serverControler.getAllAccountFromMySQL();
            if (done) {
                int listIpSize = serverControler.listIps.size();
                int index = jListInformationClickSuggest.getLastVisibleIndex();
                if (index > listIpSize - 1) {
                    index = listIpSize - 1;
                }
                int selectedIndex = jListInformationClickSuggest.getSelectedIndex();

                String arrayStrings[] = new String[serverControler.listInfos.size() + 1];
                arrayStrings[0] = "0.     0.0.0.0     SUPER IP ADDRESS";
                for (int i = 0; i < listIpSize; i++) {
                    String tempString = serverControler.listInfos.get(i);
                    arrayStrings[i + 1] = (i + 1) + ".     " + tempString;
                }
                jListInformationClickSuggest.setListData(new String[0]);
                Thread.sleep(1);
                jListInformationClickSuggest.setListData(arrayStrings);

                jListInformationClickSuggest.ensureIndexIsVisible(index);
                if (selectedIndex >= 0) {
                    jListInformationClickSuggest.setSelectedIndex(selectedIndex);
                }

                JOptionPane.showMessageDialog(null, "Success!");
            } else {
                JOptionPane.showMessageDialog(null, "Fail!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadAllIPClickSuggestActionPerformed

    private void btnLoadWarningIPClickSuggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadWarningIPClickSuggestActionPerformed
        try {
            boolean done = serverControler.getAllAccountFromMySQL();
            if (done) {
                int listIpSize = serverControler.listWarning.size();
                int index = jListInformationClickSuggest.getLastVisibleIndex();
                if (index > listIpSize - 1) {
                    index = listIpSize - 1;
                }
                int selectedIndex = jListInformationClickSuggest.getSelectedIndex();

                String arrayStrings[] = new String[serverControler.listWarning.size() + 1];
                arrayStrings[0] = "0.     0.0.0.0     SUPER IP ADDRESS";
                for (int i = 0; i < listIpSize; i++) {
                    String tempString = serverControler.listWarning.get(i);
                    arrayStrings[i + 1] = (i + 1) + ".     " + tempString;
                }
                jListInformationClickSuggest.setListData(new String[0]);
                Thread.sleep(1);
                jListInformationClickSuggest.setListData(arrayStrings);

                jListInformationClickSuggest.ensureIndexIsVisible(index);
                if (selectedIndex >= 0) {
                    jListInformationClickSuggest.setSelectedIndex(selectedIndex);
                }
                JOptionPane.showMessageDialog(null, "Success!");
            } else {
                JOptionPane.showMessageDialog(null, "Fail!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadWarningIPClickSuggestActionPerformed

    private void btn_StartClickSuggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_StartClickSuggestActionPerformed
        try {
            String selection = jListInformationClickSuggest.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String ip = selection.split("     ")[1];
                    String groupIPs = "";
                    if (ip.compareTo("0.0.0.0") == 0) {
                        ListModel<String> model = jListInformationClickSuggest.getModel();
                        for (int i = 1; i < model.getSize(); i++) {
                            String line = model.getElementAt(i).toString();
                            if (line.split("     ").length >= 2) {
                                String tempIP = line.split("     ")[1].trim();
                                groupIPs += "'" + tempIP + "',";
                            }
                        }
                        if (groupIPs.length() >= 1) {
                            groupIPs = groupIPs.substring(0, groupIPs.length() - 1);
                        }
                        groupIPs = "(" + groupIPs + ")";
                    } else {
                        groupIPs += "('" + ip + "')";
                    }
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure start this? " + ip,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.setStatus(groupIPs, 3);
                        if (done) {
                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_StartClickSuggestActionPerformed

    private void btnStopClickSuggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopClickSuggestActionPerformed
        try {
            String selection = jListInformationClickSuggest.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String ip = selection.split("     ")[1];
                    String groupIPs = "";
                    if (ip.compareTo("0.0.0.0") == 0) {
                        ListModel<String> model = jListInformationClickSuggest.getModel();
                        for (int i = 1; i < model.getSize(); i++) {
                            String line = model.getElementAt(i).toString();
                            if (line.split("     ").length >= 2) {
                                String tempIP = line.split("     ")[1].trim();
                                groupIPs += "'" + tempIP + "',";
                            }
                        }
                        if (groupIPs.length() >= 1) {
                            groupIPs = groupIPs.substring(0, groupIPs.length() - 1);
                        }
                        groupIPs = "(" + groupIPs + ")";
                    } else {
                        groupIPs += "('" + ip + "')";
                    }
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure stop this? " + ip,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.setStatus(groupIPs, 0);
                        if (done) {
                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }

                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnStopClickSuggestActionPerformed

    private void btnLoadParameterClickSuggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadParameterClickSuggestActionPerformed
        try {
            String[] arrayParameters = serverControler.getParameterClickSuggest();

            int selectedIndex = jListInformationClickSuggest.getSelectedIndex();
            jListInformationClickSuggest.setListData(new String[0]);
            Thread.sleep(1);
            jListInformationClickSuggest.setListData(arrayParameters);

            if (selectedIndex >= 0) {
                jListInformationClickSuggest.setSelectedIndex(selectedIndex);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadParameterClickSuggestActionPerformed

    private void btnDeleteIPClickSuggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteIPClickSuggestActionPerformed
        try {
            String selection = jListInformationClickSuggest.getSelectedValue();
            if (selection != null) {
                if (selection.split("     ").length >= 2) {
                    String ip = selection.split("     ")[1].trim();
                    String groupIPs = "";
                    if (ip.compareTo("0.0.0.0") == 0) {
                        ListModel<String> model = jListInformationClickSuggest.getModel();
                        for (int i = 1; i < model.getSize(); i++) {
                            String line = model.getElementAt(i).toString();
                            if (line.split("     ").length >= 2) {
                                String tempIP = line.split("     ")[1].trim();
                                groupIPs += "'" + tempIP + "',";
                            }
                        }
                        if (groupIPs.length() >= 1) {
                            groupIPs = groupIPs.substring(0, groupIPs.length() - 1);
                        }
                        groupIPs = "(" + groupIPs + ")";
                    } else {
                        groupIPs += "('" + ip + "')";
                    }
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure delete? " + ip,
                            "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.YES_OPTION) {
                        boolean done = serverControler.deleteAccountInMySQL(groupIPs);
                        if (done) {
                            if (ip.compareTo("0.0.0.0") == 0) {
                                listModelInformation.removeAllElements();
                                jListInformationClickSuggest.setListData(new String[0]);
                            } else {
                                listModelInformation.removeElement(selection);
                            }

                            JOptionPane.showMessageDialog(null, "Success!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Fail!");
                        }
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail!");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteIPClickSuggestActionPerformed

    private void tf_minTimeClickVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_minTimeClickVideoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_minTimeClickVideoActionPerformed

    private void tf_minTimeClickVideoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_minTimeClickVideoKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume(); // ignore event
        }
    }//GEN-LAST:event_tf_minTimeClickVideoKeyTyped

    private void tf_ChannelsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_ChannelsMouseClicked

        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            listChannels = new ArrayList<>();
            String filepath = c.getCurrentDirectory().toString() + "/" + c.getSelectedFile().getName();
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filepath)));
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.trim().length() > 0) {
                        listChannels.add(line);
                    }
                }
                br.close();
                tf_Channels.setText(filepath);
            } catch (Exception ex) {
                tf_Channels.setText("");
                listChannels = new ArrayList<>();
            }
        }
    }//GEN-LAST:event_tf_ChannelsMouseClicked

    private void tf_ChannelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_ChannelsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_ChannelsActionPerformed

    private void tf_maxTimeClickVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_maxTimeClickVideoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_maxTimeClickVideoActionPerformed

    private void tf_maxTimeClickVideoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_maxTimeClickVideoKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume(); // ignore event
        }
    }//GEN-LAST:event_tf_maxTimeClickVideoKeyTyped

    private void tf_sourceVideosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_sourceVideosMouseClicked

        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            listSourceVideosClickSuggest = new ArrayList<>();
            String filepath = c.getCurrentDirectory().toString() + "/" + c.getSelectedFile().getName();
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filepath)));
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.trim().length() > 0) {
                        listSourceVideosClickSuggest.add(line);
                    }
                }
                br.close();
                tf_sourceVideos.setText(filepath);
            } catch (Exception ex) {
                tf_sourceVideos.setText("");
                listSourceVideosClickSuggest = new ArrayList<>();
            }
        }
    }//GEN-LAST:event_tf_sourceVideosMouseClicked

    private void tf_sourceVideosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_sourceVideosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_sourceVideosActionPerformed

    private void tf_commentsClickSuggestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tf_commentsClickSuggestMouseClicked

        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            listCommentsClickSuggest = new ArrayList<>();
            String filepath = c.getCurrentDirectory().toString() + "/" + c.getSelectedFile().getName();
            try {
                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(filepath)));
                String line;
                while ((line = br.readLine()) != null) {
                    if (line.trim().length() > 0) {
                        listCommentsClickSuggest.add(line);
                    }
                }
                br.close();
                tf_commentsClickSuggest.setText(filepath);
            } catch (Exception ex) {
                tf_commentsClickSuggest.setText("");
                listCommentsClickSuggest = new ArrayList<>();
            }
        }
    }//GEN-LAST:event_tf_commentsClickSuggestMouseClicked

    private void tf_commentsClickSuggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_commentsClickSuggestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_commentsClickSuggestActionPerformed

    private void btnSubmitParametersClickSuggestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitParametersClickSuggestActionPerformed
        if (listChannels == null || listSourceVideosClickSuggest == null || listCommentsClickSuggest == null) {
            JOptionPane.showMessageDialog(null, "Fail!");
        } else {
            String min_time_second_my_channel = tf_minTimeClickVideo.getText();
            String max_time_second_my_channel = tf_maxTimeClickVideo.getText();
            String min_time_second_source_video = tf_minTimeSourceVideo.getText();
            String max_time_second_source_video = tf_maxTimeSourceVideo.getText();
            String target_videos = "";
            for (int i = 0; i < listChannels.size(); i++) {
                target_videos += listChannels.get(i) + ", ";
            }
            if (target_videos.length() >= 2) {
                target_videos = target_videos.substring(0, target_videos.length() - 2);
            }

            String other_videos = "";
            for (int i = 0; i < listSourceVideosClickSuggest.size(); i++) {
                other_videos += listSourceVideosClickSuggest.get(i) + ", ";
            }
            if (other_videos.length() >= 2) {
                other_videos = other_videos.substring(0, other_videos.length() - 2);
            }

            String comments = "";
            for (int i = 0; i < listCommentsClickSuggest.size(); i++) {
                comments += Utils.normalizeText(listCommentsClickSuggest.get(i)) + ", ";
            }
            if (comments.length() >= 2) {
                comments = comments.substring(0, comments.length() - 2);
            }

            if (min_time_second_my_channel.length() > 0 && max_time_second_my_channel.length() > 0
                    && min_time_second_source_video.length() > 0 && max_time_second_source_video.length() > 0
                    && target_videos.length() > 0 && other_videos.length() > 0 && comments.length() > 0) {
                try {
                    boolean done = serverControler.updateParametersClickSuggest(min_time_second_my_channel, max_time_second_my_channel,
                            min_time_second_source_video, max_time_second_source_video,
                            target_videos, other_videos, comments);
                    if (done) {
                        JOptionPane.showMessageDialog(null, "Success!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Fail!");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Fail!");
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Fail!");
            }
        }
    }//GEN-LAST:event_btnSubmitParametersClickSuggestActionPerformed

    private void tf_minTimeSourceVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_minTimeSourceVideoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_minTimeSourceVideoActionPerformed

    private void tf_minTimeSourceVideoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_minTimeSourceVideoKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume(); // ignore event
        }
    }//GEN-LAST:event_tf_minTimeSourceVideoKeyTyped

    private void tf_maxTimeSourceVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_maxTimeSourceVideoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_maxTimeSourceVideoActionPerformed

    private void tf_maxTimeSourceVideoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_maxTimeSourceVideoKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
            evt.consume(); // ignore event
        }
    }//GEN-LAST:event_tf_maxTimeSourceVideoKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrameController myUI = new FrameController();
                myUI.setLocationRelativeTo(null);
                myUI.setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddOneAccount;
    private javax.swing.JButton btnChooseFileAccount;
    private javax.swing.JButton btnDeleteIP;
    private javax.swing.JButton btnDeleteIP1;
    private javax.swing.JButton btnDeleteIPClickSuggest;
    private javax.swing.JButton btnLoadAllIP;
    private javax.swing.JButton btnLoadAllIP1;
    private javax.swing.JButton btnLoadAllIPClickSuggest;
    private javax.swing.JButton btnLoadParameter;
    private javax.swing.JButton btnLoadParameter1;
    private javax.swing.JButton btnLoadParameterClickSuggest;
    private javax.swing.JButton btnLoadWarningIP;
    private javax.swing.JButton btnLoadWarningIP1;
    private javax.swing.JButton btnLoadWarningIPClickSuggest;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnStop1;
    private javax.swing.JButton btnStopClickSuggest;
    private javax.swing.JButton btnSubmitParameters;
    private javax.swing.JButton btnSubmitParameters1;
    private javax.swing.JButton btnSubmitParametersClickSuggest;
    private javax.swing.JButton btn_AddHashtag;
    private javax.swing.JButton btn_DeleteHashtag;
    private javax.swing.JButton btn_LoadHashtag;
    private javax.swing.JButton btn_StartClickSuggest;
    private javax.swing.JButton btn_StartSeoHomepage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jListInformation;
    private javax.swing.JList<String> jListInformation1;
    private javax.swing.JList<String> jListInformationClickSuggest;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> jlistHashtag;
    private javax.swing.JPanel panelAccount;
    private javax.swing.JPanel panelAccountManager;
    private javax.swing.JPanel panelAction;
    private javax.swing.JPanel panelAction1;
    private javax.swing.JPanel panelAction2;
    private javax.swing.JPanel panelClickSuggest;
    private javax.swing.JPanel panelHomePage;
    private javax.swing.JPanel panelParameter;
    private javax.swing.JPanel panelParameter1;
    private javax.swing.JPanel panelSuggest;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTextField tf_Channels;
    private javax.swing.JTextField tf_comments;
    private javax.swing.JTextField tf_comments1;
    private javax.swing.JTextField tf_commentsClickSuggest;
    private javax.swing.JTextField tf_hashtag;
    private javax.swing.JTextField tf_idvideo;
    private javax.swing.JTextField tf_ip;
    private javax.swing.JTextField tf_maxTime;
    private javax.swing.JTextField tf_maxTime1;
    private javax.swing.JTextField tf_maxTimeClickVideo;
    private javax.swing.JTextField tf_maxTimeOther;
    private javax.swing.JTextField tf_maxTimeSourceVideo;
    private javax.swing.JTextField tf_minTime;
    private javax.swing.JTextField tf_minTime1;
    private javax.swing.JTextField tf_minTimeClickVideo;
    private javax.swing.JTextField tf_minTimeOther;
    private javax.swing.JTextField tf_minTimeSourceVideo;
    private javax.swing.JTextField tf_myVideos;
    private javax.swing.JTextField tf_otherVideos;
    private javax.swing.JPasswordField tf_password;
    private javax.swing.JTextField tf_sourceVideos;
    private javax.swing.JTextField tf_username;
    // End of variables declaration//GEN-END:variables
}
